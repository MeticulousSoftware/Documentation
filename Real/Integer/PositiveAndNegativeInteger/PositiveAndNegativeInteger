import "./declare" ⟦⟦All⟧⟧



define ⦃PositiveInteger⦄,⦃NegativeInteger⦄,
⦃NonPositiveInteger⦄,⦃NonNegativeInteger⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints ⦄,
				⦃unicodeCodePoints Non⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
			for all ⟦typeIdentifier0⟧:
				if:
					⦃⦃{
						⦃unicodeCodePoints Positive⦄,
						⦃unicodeCodePoints Negative⦄
					}⦄.Has(⦃typeIdentifier0⦄)⦄
				then:
						⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧⟦Integer⦄)⦄
					and:
						for all ⟦integer⟧:
								⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧⟦Integer⦄.HasInstance(⦃integer⦄)⦄
							if and only if:
									⦃⦃Integer⦄.HasInstance(⦃integer⦄)⦄
								and:
									⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧⟦Real⦄.HasInstance(⦃integer⦄)⦄

define ⦃method ⦃Integer⦄.MapToIntegerRepresentationInBase⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints ⦄,
				⦃unicodeCodePoints Non⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
			for all ⟦typeIdentifier0⟧:
				if:
					⦃⦃{
						⦃unicodeCodePoints Positive⦄,
						⦃unicodeCodePoints Negative⦄
					}⦄.Has(⦃typeIdentifier0⦄)⦄
				then:
					for all ⟦integer⟧:
						if:
							⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧⟦Integer⦄.HasInstance(⦃integer⦄)⦄
						then:
							for all ⟦x⟧:
									⦃⦃⦃⦃integer⦄.MapTo⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧⟦IntegerRepresentationInBase⦄.GetGraph()⦄.Has(⦃x⦄)⦄
								if and only if:
									there exists ⟦y⟧:
										⦃⦃x⦄.IsEqualTo(⦃(⦃y⦄,⦃⦃⦃integer⦄.MapToIntegerRepresentationInBase(⦃y⦄)⦄(⦃1⦄)⦄)⦄)⦄