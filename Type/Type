import "./declare" ⟦⟦All⟧⟧



define ⦃Type⦄
		⦃⦃MutuallyDisjointType⦄.HasInstance(⦃Type⦄)⦄
	and:
		let:
			⟦buildingMap⟧:
					⦃⦃Function⦄.HasInstance(⦃buildingMap⦄)⦄
				and:
					for all ⟦methods⟧:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						if and only if:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
										⦃⦃Function⦄.HasInstance(⦃⟦⟦⦃methodIdentifier⦄⟧⟧⦄)⦄
							and:
								there exists
									⟦HasInstance⟧:
										⦃⦃methods⦄.IsEqualTo(⦃⦃Function⦄(⦃{
											⦃(⦃unicodeCodePoints HasInstance⦄,⦃HasInstance⦄)⦄
										}⦄)⦄)⦄
									and:
										⦃⦃⦃HasInstance⦄.GetDomain()⦄.IsEqualTo(⦃⦃MathematicalObject⦄.MapToClass()⦄)⦄
									and:
										⦃⦃⦃HasInstance⦄.GetCoDomain()⦄.IsSubMultiClassOf(⦃⦃Boolean⦄.MapToClass()⦄)⦄
				and:
					for all ⟦methods⟧:
						if:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						then:
							let:
								⟦type⟧:
									⦃⦃type⦄.IsEqualTo(⦃⦃buildingMap⦄(⦃methods⦄)⦄)⦄
								⦃⦃Type⦄.HasInstance(⦃type⦄)⦄
							and:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
										⦃⦃⦃type⦄.⟦⟦⦃methodIdentifier⦄⟧⟧⦄.IsEqualTo(⦃⦃methods⦄(⦃methodIdentifier⦄)⦄)⦄
		⦃⦃⦃Type⦄.MapToClass()⦄.IsEqualTo(⦃⦃buildingMap⦄.GetCoDomain()⦄)⦄

define ⦃method ⦃Type⦄.MapToClass⦄
	for all ⟦type⟧:
		if:
			⦃⦃Type⦄.HasInstance(⦃type⦄)⦄
		then:
			⦃⦃⦃⦃type⦄.MapToClass()⦄.Has⦄.IsEqualTo(⦃⦃type⦄.HasInstance⦄)⦄



declare ⟦UnionOfTypes⟧
define ⦃UnionOfTypes⦄
	⦃⦃UnionOfTypes⦄.IsEqualTo(⦃⦃Type⦄.MapToClass()⦄)⦄



export ⦃UnionOfTypes⦄