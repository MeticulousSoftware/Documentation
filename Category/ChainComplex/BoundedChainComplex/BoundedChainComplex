import "./declare" ⟦⟦All⟧⟧



declare ⟦IsLowerBoundOfChainComplex⟧,⟦IsUpperBoundOfChainComplex⟧
define ⦃IsLowerBoundOfChainComplex⦄,⦃IsUpperBoundOfChainComplex⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Lower⦄,
				⦃unicodeCodePoints Upper⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Function⦄.HasInstance(⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄)⦄
			and:
				⦃⦃⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄.GetDomain()⦄.IsEqualTo(⦃⦃⦃(⦃ChainComplex⦄,⦃Integer⦄)⦄.MapWith(⦃unaryFunction MapToClass⦄)⦄.GetCartesianProduct()⦄)⦄
			and:
				for all ⟦x⟧:
					if:
						⦃⦃⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄.GetDomain()⦄.Has(⦃x⦄)⦄
					then:
						let:
							⟦isBoundOfChainComplex⟧:
								⦃⦃isBoundOfChainComplex⦄.IsEqualTo(⦃⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄(⦃x⦄)⦄)⦄
							⦃⦃Boolean⦄.HasInstance(⦃isBoundOfChainComplex⦄)⦄
						and:
								⦃isBoundOfChainComplex⦄
							if and only if:
								let:
									⟦chain⟧,⟦bound⟧:
										⦃⦃(⦃chain⦄,⦃bound⦄)⦄.IsEqualTo(⦃x⦄)⦄
									⟦potentialBounds⟧:
											⦃⦃Class⦄.HasInstance(⦃potentialBounds⦄)⦄
										and:
											for all ⟦potentialBound⟧:
													⦃⦃potentialBounds⦄.Has(⦃potentialBound⦄)⦄
												if and only if:
														⦃⦃Integer⦄.HasInstance(⦃potentialBound⦄)⦄
													and:
														for all ⟦index⟧:
															if:
																let:
																	⟦typeIdentifier0⟧:
																		if:
																			⦃⦃typeIdentifier⦄.IsEqualTo(⦃unicodeCodePoints Lower⦄)⦄
																		then:
																			⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints Sup⦄)⦄
																		else:
																			⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints Inf⦄)⦄
																⦃⦃potentialBound⦄.Is⟦⟦⦃typeIdentifier0⦄⟧⟧eriorTo(⦃index⦄)⦄
															then:
																⦃⦃⦃⦃chain⦄.GetCategory()⦄.GetCoTerminalObjects()⦄.Has(⦃⦃chain⦄.GetDifferentialOf(⦃index⦄)⦄)⦄
									not:
										⦃⦃potentialBounds⦄.IsEqualTo(⦃{}⦄)⦄
								and:
									let:
										⟦typeIdentifier0⟧:
											if:
												⦃⦃typeIdentifier⦄.IsEqualTo(⦃unicodeCodePoints Lower⦄)⦄
											then:
												⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints Max⦄)⦄
											else:
												⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints Min⦄)⦄
									if:
										⦃⦃⦃⦃potentialBounds⦄.Get⟦⟦⦃typeIdentifier0⦄⟧⟧imum⦄.GetDomain()⦄.Has(⦃()⦄)⦄
									then:
										⦃⦃bound⦄.IsEqualTo(⦃⦃potentialBounds⦄.Get⟦⟦⦃typeIdentifier0⦄⟧⟧imum()⦄)⦄
									else:
										⦃⦃bound⦄.IsEqualTo(⦃0⦄)⦄



define ⦃LowerBoundedChainComplex⦄,⦃UpperBoundedChainComplex⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Lower⦄,
				⦃unicodeCodePoints Upper⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧BoundedChainComplex⦄)⦄
			and:
				for all ⟦chain⟧:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧BoundedChainComplex⦄.HasInstance(⦃chain⦄)⦄
					if and only if:
						there exists ⟦bound⟧:
							⦃⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄(⦃chain⦄,⦃bound⦄)⦄

define ⦃method ⦃LowerBoundedChainComplex⦄.GetLowerBound⦄,⦃method ⦃UpperBoundedChainComplex⦄.GetUpperBound⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Lower⦄,
				⦃unicodeCodePoints Upper⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
			for all ⟦chain⟧:
				if:
					⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧BoundedChainComplex⦄.HasInstance(⦃chain⦄)⦄
				then:
						⦃⦃⦃⦃chain⦄.Get⟦⟦⦃typeIdentifier⦄⟧⟧⦄.GetDomain()⦄.IsEqualTo(⦃{⦃()⦄}⦄)⦄
					and:
						⦃⦃Is⟦⟦⦃typeIdentifier⦄⟧⟧BoundOfChainComplex⦄(⦃chain⦄,⦃⦃chain⦄.Get⟦⟦⦃typeIdentifier⦄⟧⟧()⦄)⦄



define ⦃BoundedChainComplex⦄
		⦃⦃Type⦄.HasInstance(⦃BoundedChainComplex⦄)⦄
	and:
		for all ⟦chain⟧:
				⦃⦃BoundedChainComplex⦄.HasInstance(⦃chain⦄)⦄
			if and only if:
				for all ⟦typeIdentifier⟧:
					if:
						⦃⦃{
							⦃unicodeCodePoints Lower⦄,
							⦃unicodeCodePoints Upper⦄
						}⦄.Has(⦃typeIdentifier⦄)⦄
					then:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧BoundedChainComplex⦄.HasInstance(⦃chain⦄)⦄