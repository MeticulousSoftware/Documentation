import "./declare" ⟦⟦All⟧⟧



define ⦃LeftQuasiReflexiveRelation⦄,⦃RightQuasiReflexiveRelation⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Left⦄,
				⦃unicodeCodePoints Right⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧QuasiReflexiveRelation⦄)⦄
			and:
				for all ⟦relation⟧:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧QuasiReflexiveRelation⦄.HasInstance(⦃relation⦄)⦄
					if and only if:
							⦃⦃HomogeneousBinaryRelation⦄.HasInstance(⦃relation⦄)⦄
						and:
							let:
								⟦function⟧:
									⦃⦃function⦄.IsEqualTo(⦃⦃relation⦄.GetSimplifiedFunction()⦄)⦄
							for all ⟦sequence⟧:
								if:
									⦃⦃function⦄(⦃sequence⦄)⦄
								then:
									let:
										⟦x⟧:
											let:
												⟦index⟧:
													if:
														⦃⦃typeIdentifier⦄.IsEqualTo(⦃unicodeCodePoints Left⦄)⦄
													then:
														⦃⦃index⦄.IsEqualTo(⦃0⦄)⦄
													else:
														⦃⦃index⦄.IsEqualTo(⦃1⦄)⦄
											⦃⦃x⦄.IsEqualTo(⦃⦃sequence⦄(⦃index⦄)⦄)⦄
									⦃⦃function⦄(⦃x⦄,⦃x⦄)⦄



define ⦃QuasiReflexiveRelation⦄
		⦃⦃Type⦄.HasInstance(⦃QuasiReflexiveRelation⦄)⦄
	and:
		for all ⟦relation⟧:
				⦃⦃QuasiReflexiveRelation⦄.HasInstance(⦃relation⦄)⦄
			if and only if:
				for all ⟦typeIdentifier⟧:
					if:
						⦃⦃{
							⦃unicodeCodePoints Left⦄,
							⦃unicodeCodePoints Right⦄
						}⦄.Has(⦃typeIdentifier⦄)⦄
					then:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧QuasiReflexiveRelation⦄.HasInstance(⦃relation⦄)⦄