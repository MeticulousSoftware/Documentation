import "./declare" ⟦⟦All⟧⟧



define ⦃JoinSemiLattice⦄,⦃MeetSemiLattice⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Join⦄,
				⦃unicodeCodePoints Meet⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧SemiLattice⦄)⦄
			and:
				for all ⟦relation⟧:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧SemiLattice⦄.HasInstance(⦃relation⦄)⦄
					if and only if:
							⦃⦃NonStrictPartialOrder⦄.HasInstance(⦃relation⦄)⦄
						and:
							for all ⟦class⟧:
								if:
										⦃⦃NonEmptyFiniteClass⦄.HasInstance(⦃class⦄)⦄
									and:
										⦃⦃class⦄.IsSubMultiClassOf(⦃⦃operation⦄.GetSharedDomainSignatureClass()⦄)⦄
								then:
									not:
										let:
											⟦typeIdentifier0⟧:
												if:
													⦃⦃typeIdentifier⦄.IsEqualTo(⦃unicodeCodePoints Join⦄)⦄
												then:
													⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints LeastUpper⦄)⦄
												else:
													⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints GreatestLower⦄)⦄
										⦃⦃⦃relation⦄.Get⟦⟦⦃typeIdentifier0⦄⟧⟧BoundsOf(⦃class⦄)⦄.IsEqualTo(⦃{}⦄)⦄



define ⦃Lattice⦄
		⦃⦃Type⦄.HasInstance(⦃Lattice⦄)⦄
	and:
		for all ⟦relation⟧:
				⦃⦃Lattice⦄.HasInstance(⦃relation⦄)⦄
			if and only if:
				for all ⟦typeIdentifier⟧:
					if:
						⦃⦃{
							⦃unicodeCodePoints Join⦄,
							⦃unicodeCodePoints Meet⦄
						}⦄.Has(⦃typeIdentifier⦄)⦄
					then:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧SemiLattice⦄.HasInstance(⦃relation⦄)⦄