import "./declare" ⟦⟦All⟧⟧



define ⦃PartialOrder⦄
		⦃⦃Type⦄.HasInstance(⦃PartialOrder⦄)⦄
	and:
		for all ⟦relation⟧:
				⦃⦃PartialOrder⦄.HasInstance(⦃relation⦄)⦄
			if and only if:
				for all ⟦typeIdentifier⟧:
					if:
						⦃⦃{
							⦃unicodeCodePoints Transitive⦄,
							⦃unicodeCodePoints AntiSymmetric⦄
						}⦄.Has(⦃typeIdentifier⦄)⦄
					then:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧Relation⦄.HasInstance(⦃relation⦄)⦄



define ⦃NonStrictPartialOrder⦄,⦃StrictPartialOrder⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Non⦄,
				⦃unicodeCodePoints ⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧StrictPartialOrder⦄)⦄
			and:
				for all ⟦relation⟧:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧StrictPartialOrder⦄.HasInstance(⦃relation⦄)⦄
					if and only if:
						for all ⟦type⟧:
							if:
								let:
									⟦typeIdentifier0⟧:
										if:
											⦃⦃typeIdentifier⦄.IsEqualTo(⦃unicodeCodePoints Non⦄)⦄
										then:
											⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints ⦄)⦄
										else:
											⦃⦃typeIdentifier0⦄.IsEqualTo(⦃unicodeCodePoints Anti⦄)⦄
								⦃⦃{⦃PartialOrder⦄,⦃⟦⟦⦃typeIdentifier0⦄⟧⟧ReflexiveRelation⦄}⦄.Has(⦃type⦄)⦄
							then:
								⦃⦃type⦄.HasInstance(⦃relation⦄)⦄