import "./declare" ⟦⟦All⟧⟧



define ⦃EquippedStructure⦄
		⦃⦃MutuallyDisjointType⦄.HasInstance(⦃EquippedStructure⦄)⦄
	and:
		let:
			⟦buildingMap⟧:
					⦃⦃Function⦄.HasInstance(⦃buildingMap⦄)⦄
				and:
					for all ⟦methods⟧:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						if and only if:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
											⦃⦃Function⦄.HasInstance(⦃⟦⟦⦃methodIdentifier⦄⟧⟧⦄)⦄
										and:
											⦃⦃⦃⟦⟦⦃methodIdentifier⦄⟧⟧⦄.GetDomain()⦄.IsEqualTo(⦃{⦃()⦄}⦄)⦄
							and:
								there exists
									⟦GetEquipments⟧:
										⦃⦃methods⦄.IsEqualTo(⦃⦃Function⦄(⦃{
											⦃(⦃unicodeCodePoints GetEquipments⦄,⦃GetEquipments⦄)⦄
										}⦄)⦄)⦄
									and:
										let:
											⟦equipments⟧:
												⦃⦃equipments⦄.IsEqualTo(⦃⦃GetEquipments⦄()⦄)⦄
											⦃⦃Function⦄.HasInstance(⦃equipments⦄)⦄
										and:
											⦃⦃⦃equipments⦄.GetDomain()⦄.IsSubMultiClassOf(⦃⦃⦃FiniteSequence⦄.GetTypeInducedBy(⦃UnicodeCodePoint⦄)⦄.MapToClass()⦄)⦄
				and:
					for all ⟦methods⟧:
						if:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						then:
							let:
								⟦structure⟧:
									⦃⦃structure⦄.IsEqualTo(⦃⦃buildingMap⦄(⦃methods⦄)⦄)⦄
								⦃⦃EquippedStructure⦄.HasInstance(⦃structure⦄)⦄
							and:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
										⦃⦃⦃structure⦄.⟦⟦⦃methodIdentifier⦄⟧⟧⦄.IsEqualTo(⦃⦃methods⦄(⦃methodIdentifier⦄)⦄)⦄
		⦃⦃⦃EquippedStructure⦄.MapToClass()⦄.IsEqualTo(⦃⦃buildingMap⦄.GetCoDomain()⦄)⦄

define ⦃method ⦃EquippedStructure⦄.MapToClass⦄
	for all ⟦structure⟧:
		if:
			⦃⦃EquippedStructure⦄.HasInstance(⦃structure⦄)⦄
		then:
			⦃⦃binaryFunction IsEqualTo⦄(⦃⦃(
				⦃structure⦄,
				⦃⦃structure⦄.GetEquipments()⦄
			)⦄.MapWith(⦃unaryFunction MapToClass⦄)⦄)⦄



declare ⟦UnionOfTypes⟧
define ⦃UnionOfTypes⦄
	⦃⦃UnionOfTypes⦄.IsEqualTo(⦃⦃EquippedStructure⦄.MapToClass()⦄)⦄



export ⦃UnionOfTypes⦄