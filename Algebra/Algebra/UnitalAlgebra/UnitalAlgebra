import "./declare" ⟦⟦All⟧⟧



define ⦃MetaUnitalAlgebra⦄,⦃UnitalAlgebra⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Meta⦄,
				⦃unicodeCodePoints ⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
				⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧UnitalAlgebra⦄)⦄
			and:
				for all ⟦algebra⟧:
						⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧UnitalAlgebra⦄.HasInstance(⦃algebra⦄)⦄
					if and only if:
						there exists ⟦typeIdentifier0⟧:
								⦃⦃{
									⦃unicodeCodePoints Left⦄,
									⦃unicodeCodePoints Right⦄,
									⦃unicodeCodePoints Bi⦄
								}⦄.Has(⦃typeIdentifier0⦄)⦄
							and:
								⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧UnitalAlgebra⦄.HasInstance(⦃algebra⦄)⦄



define ⦃MetaLeftUnitalAlgebra⦄,⦃MetaRightUnitalAlgebra⦄,⦃MetaBiUnitalAlgebra⦄,
⦃LeftUnitalAlgebra⦄,⦃RightUnitalAlgebra⦄,⦃BiUnitalAlgebra⦄
	for all ⟦typeIdentifier⟧:
		if:
			⦃⦃{
				⦃unicodeCodePoints Meta⦄,
				⦃unicodeCodePoints ⦄
			}⦄.Has(⦃typeIdentifier⦄)⦄
		then:
			for all ⟦typeIdentifier0⟧:
				if:
					⦃⦃{
						⦃unicodeCodePoints Left⦄,
						⦃unicodeCodePoints Right⦄,
						⦃unicodeCodePoints Bi⦄
					}⦄.Has(⦃typeIdentifier0⦄)⦄
				then:
						⦃⦃Type⦄.HasInstance(⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧UnitalAlgebra⦄)⦄
					and:
						for all ⟦algebra⟧:
								⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧UnitalAlgebra⦄.HasInstance(⦃algebra⦄)⦄
							if and only if:
									⦃⦃⟦⟦⦃typeIdentifier⦄⟧⟧⟦⟦⦃typeIdentifier0⦄⟧⟧Algebra⦄.HasInstance(⦃algebra⦄)⦄
								and:
									⦃⦃UnitalPartialMagma⦄.HasInstance(⦃⦃algebra⦄.GetMultiplicationStructure()⦄)⦄