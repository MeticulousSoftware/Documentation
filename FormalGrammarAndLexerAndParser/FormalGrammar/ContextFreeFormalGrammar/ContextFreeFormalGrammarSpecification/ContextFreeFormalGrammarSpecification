import "./declare" ⟦⟦All⟧⟧



define ⦃ContextFreeFormalGrammarSpecification⦄
		⦃⦃Type⦄.HasInstance(⦃ContextFreeFormalGrammarSpecification⦄)⦄
	and:
		let:
			⟦buildingMap⟧:
					⦃⦃Function⦄.HasInstance(⦃buildingMap⦄)⦄
				and:
					for all ⟦methods⟧:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						if and only if:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
											⦃⦃Function⦄.HasInstance(⦃⟦⟦⦃methodIdentifier⦄⟧⟧⦄)⦄
										and:
											⦃⦃⦃⟦⟦⦃methodIdentifier⦄⟧⟧⦄.GetDomain()⦄.IsEqualTo(⦃{⦃()⦄}⦄)⦄
							and:
								there exists
									⟦GetDescription⟧,
									⟦GetGeneratedParser⟧:
										⦃⦃methods⦄.IsEqualTo(⦃⦃Function⦄(⦃{
											⦃(⦃unicodeCodePoints GetDescription⦄,⦃GetDescription⦄)⦄,
											⦃(⦃unicodeCodePoints GetGeneratedParser⦄,⦃GetGeneratedParser⦄)⦄
										}⦄)⦄)⦄
									and:
										⦃⦃Parser⦄.HasInstance(⦃⦃GetGeneratedParser⦄()⦄)⦄
				and:
					for all ⟦methods⟧:
						if:
							⦃⦃⦃buildingMap⦄.GetDomain()⦄.Has(⦃methods⦄)⦄
						then:
							let:
								⟦specification⟧:
									⦃⦃specification⦄.IsEqualTo(⦃⦃buildingMap⦄(⦃methods⦄)⦄)⦄
								⦃⦃ContextFreeFormalGrammarSpecification⦄.HasInstance(⦃specification⦄)⦄
							and:
								for all ⟦methodIdentifier⟧:
									if:
										⦃⦃⦃methods⦄.GetDomain()⦄.Has(⦃methodIdentifier⦄)⦄
									then:
										⦃⦃⦃specification⦄.⟦⟦⦃methodIdentifier⦄⟧⟧⦄.IsEqualTo(⦃⦃methods⦄(⦃methodIdentifier⦄)⦄)⦄
		⦃⦃⦃buildingMap⦄.GetCoDomain()⦄.IsSubMultiClassOf(⦃⦃ContextFreeFormalGrammarSpecification⦄.MapToClass()⦄)⦄

define ⦃method ⦃ContextFreeFormalGrammarSpecification⦄.MapToClass⦄
	for all ⟦specification⟧:
		if:
			⦃⦃ContextFreeFormalGrammarSpecification⦄.HasInstance(⦃specification⦄)⦄
		then:
			⦃⦃binaryFunction IsEqualTo⦄(⦃⦃(
				⦃specification⦄,
				⦃⦃specification⦄.GetDescription()⦄
			)⦄.MapWith(⦃unaryFunction MapToClass⦄)⦄)⦄